#include <iostream>

/*Task 4*/
void FilltheArray(int **array, int rows, int columns) { //Создаем функцию для заполнения массива
    for (int i = 0; i < rows; i++) { //перебором по строкам и столбцам, помешаем число на каждое место в массиве
        for (int j = 0; j < columns; j++) {
            // генерируем случайные числа с помощью: (rand() % (end - start + 1) + start), где end - это конечное число (50), а start - начальное число (10)
            array[i][j] = rand() % 41 + 10;  
        }
    }
}
void ShowArray(int **array, int rows, int columns) { //Создаем функцию для заполнения массива
    for (int i = 0; i < rows; i++) { //перебором по строкам и столбцам, выводим каждый элемент
        for (int j = 0; j < columns; j++) {
            std::cout << array[i][j] << " ";
        }
        std::cout << std::endl; //после прохода по одной строке, делаем перенос на новую, для вывода ввиде двумерного массива
    }
}

/*Task 6*/
/*чтобы найти меньшую разницу между наибольшим и наименьшим числом из k чисел,
 следует рассматривать k минимальных чисел из массива,
 чтобы максимальное и минимальное были как можно меньше,
 отсортировав массив по возрастанию и рассматривая k первых элементов*/
void BubbleSort(int *array, int length) { //функция сортировки bubble способом
    for (int i = 0; i < length - 1; ++i) {
        for (int j = 0; j < length - i - 1; ++j) {
            if (*(array + j) > *(array + j + 1)) {
                int temp = *(array + j);
                *(array + j) = *(array + j + 1);
                *(array + j + 1) = temp;
            }
        }
    }
}
int TheMinDifference(int *nums, int k) { //функция расчитывающая минимальную разницу
    int max = 0;  //задаем переменные для минимального и максимального числа из k
    int min = 1000000;
    for (int count = 0; count < k; count++) { //перебором сравниваем k первых (т.е. минимальных) элементов
        if (nums[count] < min) //если элемент меньше минимального, он становится минимальным
            min = nums[count];
        else if (nums[count] > max) //если элемент больше максимального, он становится максимальным
            max = nums[count];
    }
    return (max - min); //возвращаем разницу
}

/*Task 8*/
int TheMajorityElement(int *array, int length) { 
    int number = 0;
    int element = 0;
    for (int i = 0; i < length; i++) { 
        number = 0;
        for (int j = 0; j < length; j++) {
            if (array[i] == array[j])
                number += 1;
        }
        if (number >= (length / 2))
            return array[i];
    }
}

int main()
{
    /*Task 4*/
    int row = 0; //иницилизируем перемнные для количества строк и столбцов
    int column = 0;
    std::cout << "Enter the number of rows: ";
    std::cin >> row; //вводим количество строк
    std::cout << "Enter the number of columns: ";
    std::cin >> column; //вводим количество столбцов

    int **array = new int*[row];  // выделяем память для массива из количества строк
    for (int count = 0; count < row; count++) {
        array[count] = new int[column];  // массив для столбцов
    }

    FilltheArray(array, row, column);  // заполняем массив случайными числами через функцию
    std::cout << "Array:" << std::endl;
    ShowArray(array, row, column);  // прказываем массив через функцию

    for (int count = 0; count < row; count++) { // освобождаем память
        delete[] array[count];
    }
    delete[] array;

    /*Task 6*/
    int length = 0;
    int k = 0;
    std::cout << "Enter the length of array: ";
    std::cin >> length; //вводим количество элементов массива
    std::cout << "Enter the k: ";
    std::cin >> k; //вводим количество элементов для поиска разницы

    int *nums = new int[length];  //выделяем массив
    std::cout << "Enter the numbers of array: ";  //заполняем массив перебором
    for (int count = 0; count < length; count++) {
        std::cin >> nums[count];
    }

    BubbleSort(nums, length); //сортируем массив по возрастанию
    std::cout << "The minimum differences: " << TheMinDifference(nums, k); //выводим разницу

    delete[] nums;

    /*task 8*/
    int length8 = 0;
    std::cout << "Enter the length of array: ";
    std::cin >> length8; //вводим количество элементов массива

    int *array8 = new int[length8];  //выделяем массив
    std::cout << "Enter the numbers of array: ";  //заполняем массив перебором
    for (int count = 0; count < length8; count++) {
        std::cin >> array8[count];
    }

    std::cout << "The majority element: " << TheMajorityElement(array8, length8);
    delete[] array8;

    return 0;
}
